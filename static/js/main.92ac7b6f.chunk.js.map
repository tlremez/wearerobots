{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","CardList","robots","console","log","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","color","onClick","PureComponent","Header","nextProps","nextState","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sPAceA,MAZf,YAAgC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MAAMC,EAAI,EAAJA,GAC1B,OACC,sBAAKC,UAAU,mDAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAA1B,cACP,gCACC,6BAAKF,IACL,4BAAIC,WCeOI,MApBf,YAA4B,IAATC,EAAQ,EAARA,OAElB,OADAC,QAAQC,IAAI,YAEX,8BAEKF,EAAOG,KAAI,SAACC,EAAMC,GACpB,OACC,cAAC,EAAD,CAECT,GAAII,EAAOK,GAAGT,GACdF,KAAMM,EAAOK,GAAGX,KAChBC,MAAOK,EAAOK,GAAGV,OAHZU,SCKGC,MAdf,YAA+C,EAA3BC,YAA4B,IAAfC,EAAc,EAAdA,aAEhC,OADAP,QAAQC,IAAI,aAEX,qBAAKL,UAAU,MAAf,SACA,uBACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCDGI,EAPD,SAACC,GACd,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEJ,EAAMK,YCgBKC,E,kDAlBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACVC,UAAU,GAHM,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACN,0DAEDG,KAAKX,MAAMK,a,GAhBOQ,aC4BZC,E,kDA3Bd,aAAc,IAAD,8BACZ,gBAWDC,YAAc,WACb,EAAKH,UAAS,SAAAL,GACb,MAAO,CAACS,MAAOT,EAAMS,MAAQ,OAZ9B,EAAKT,MAAQ,CACZS,MAAO,GAHI,E,qDAmBZ,OADA5B,QAAQC,IAAI,iBAEX,yBAAQ4B,MAAON,KAAKX,MAAMiB,MAAOC,QAASP,KAAKI,YAA/C,oBACSJ,KAAKJ,MAAMS,a,GAtBKG,iBCkBbC,E,oLAhBQC,EAAWC,GAChC,OAAO,I,+BAKP,OADAlC,QAAQC,IAAI,UAEV,gCAEA,oBAAIL,UAAU,KAAd,2BACA,cAAC,EAAD,CAAeiC,MAAO,e,GAXLJ,aCHRU,G,MAAsB,uBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBC2B/BC,E,kLAGJhB,KAAKX,MAAM4B,oB,+BAGH,IAAD,EACiDjB,KAAKX,MAAtD6B,EADA,EACAA,YAAcC,EADd,EACcA,eAAgB3C,EAD9B,EAC8BA,OAAQ4C,EADtC,EACsCA,UACvCC,EAAiB7C,EAAO8C,QAAO,SAAAC,GACrC,OAAOA,EAAMrD,KAAKsD,cAAcC,SAASP,EAAYM,kBAErD,OAAOJ,EACN,4CAGC,sBAAK/C,UAAU,KAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,CAAWW,aAAcmC,IACzB,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAU3C,OAAQ6C,e,GApBPnB,aA8BHwB,eAhDS,SAAA9B,GACvB,MAAO,CACNsB,YAAatB,EAAM+B,aAAaT,YAChC1C,OAAQoB,EAAMgC,cAAcpD,OAC5B4C,UAAWxB,EAAMgC,cAAcR,UAC/BtB,MAAOF,EAAMgC,cAAc9B,UAIF,SAAC+B,GAC3B,MAAO,CACNV,eAAgB,SAACW,GAAD,OAAUD,GCjBGE,EDiBqBD,EAAME,OAAOC,MCjBzB,CACvChD,KAAM2B,EACNsB,QAASH,KAFoB,IAACA,GDkB7Bd,gBAAiB,kBAAMY,GCbU,SAACA,GACnCA,EAAS,CAAC5C,KAAM4B,IAChBsB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIV,EAAS,CAAC5C,KAAM6B,EAAwBoB,QAASK,OAC9DC,OAAM,SAAA1C,GAAK,OAAI+B,EAAS,CAAC5C,KAAK8B,EAAuBmB,QAASpC,cD4ClD4B,CAA6CV,GEnDtDyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTZ,MAAK,SAAAgB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1D,QACfqD,UAAUC,cAAcO,WAK1BhF,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB8D,OAAM,SAAA1C,GACLrB,QAAQqB,MAAM,4CAA6CA,MC/DjE,IAAM4D,EAAqB,CAC1BxC,YAAa,IAYRyC,EAAqB,CAC1BvC,WAAW,EACX5C,OAAO,GACPsB,MAAM,ICTD8D,G,MAFSC,yBAEKC,YAAgB,CAACnC,aDHT,WAAwC,IAAvC/B,EAAsC,uDAAhC8D,EAAoBK,EAAY,uDAAL,GAC7D,OAAOA,EAAO9E,MACb,KAAK2B,EACJ,OAAOoD,OAAOC,OAAO,GAAIrE,EAAO,CAACsB,YAAY6C,EAAO7B,UACrD,QACC,OAAOtC,ICFyCgC,cDYtB,WAAwC,IAAvChC,EAAsC,uDAAhC+D,EAAoBI,EAAY,uDAAL,GAC9D,OAAOA,EAAO9E,MACb,KAAK4B,EACL,OAAOmD,OAAOC,OAAO,GAAIrE,EAAO,CAACwB,WAAW,IAC5C,KAAKN,EACL,OAAOkD,OAAOC,OAAO,GAAIrE,EAAO,CAACpB,OAAQuF,EAAO7B,QAASd,WAAW,IACpE,KAAKL,EACL,OAAOiD,OAAOC,OAAO,GAAIrE,EAAM,CAACE,MAAOiE,EAAO7B,QAASd,WAAW,IAClE,QACA,OAAOxB,OCnBHsE,EAAQC,YAAYP,EAAaQ,YAAgBC,MAEvDC,IAASC,OACR,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACC,cAAC,EAAD,MACaM,SAASC,eAAe,SFDxB,WACb,GAA6C,kBAAmBxB,UAAW,CAGzE,GADkB,IAAIyB,IAAIC,eAAwBhC,OAAOC,UAC3CgC,SAAWjC,OAAOC,SAASgC,OAIvC,OAGFjC,OAAOkC,iBAAiB,QAAQ,WAC9B,IAAM7B,EAAK,UAAM2B,eAAN,sBAEPlC,EAwCV,SAAiCO,GAE/Bb,MAAMa,GACHZ,MAAK,SAAAC,GAGkB,MAApBA,EAASyC,SACuD,IAAhEzC,EAAS0C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7ChC,UAAUC,cAAcgC,MAAM9C,MAAK,SAAAgB,GACjCA,EAAa+B,aAAa/C,MAAK,WAC7BO,OAAOC,SAASwC,eAKpBrC,EAAgBC,MAGnBR,OAAM,WACL/D,QAAQC,IACN,oEA5DA2G,CAAwBrC,GAGxBD,EAAgBC,OEhBxBsC,K","file":"static/js/main.92ac7b6f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card({name, email,id}){\r\n\treturn(\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-S'>\r\n\t\t<img src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({robots}){\r\n\tconsole.log('CardList');\r\n\treturn(\r\n\t\t<div>\r\n\t\t    {\r\n\t\t    \trobots.map((user, i) =>{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t    }\r\n\t    </div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({searchfield, searchChange}){\r\n\tconsole.log('SearchBox');\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\ttype='search' \r\n\t\tplaceholder='Search Robots'\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\nexport default ErrorBoundry;","import React, {PureComponent} from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\t// shouldComponentUpdate(nextProps, nextState){\r\n\t// \tif(this.state.count !== nextState.count){\r\n\t// \t\treturn true\r\n\t// \t}\r\n\t// \treturn false\r\n\t// }\r\n\tupdateCount = () => {\r\n\t\tthis.setState(state => {\r\n\t\t\treturn {count: state.count + 1}\r\n\t\t})\r\n\t}\r\n\trender() {\r\n\t\tconsole.log('CounterButton');\r\n\t\treturn (\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState){\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('Header');\r\n\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\r\n\t\t\t\t<h1 className=\"f1\">We are Robots</h1>\r\n\t\t\t\t<CounterButton color={'red'} />\r\n\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import {robots} from '../robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\n\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn {\r\n\t\tonSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {searchField , onSearchChange, robots, isPending}=this.props;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\treturn isPending ?\r\n\t\t\t<h1>Loading...</h1> :\r\n\t\t\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<Header/>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\t\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) =>({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField:action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots:[],\r\n\terror:''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\treturn Object.assign({}, state,{error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport {searchRobots, requestRobots} from './reducers'\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,  document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}